name: "Bot_kilo - Unified Trading System"
version: "1.0.0"
description: "Multi-model cryptocurrency trading bot with GRU, LightGBM, and PPO - Comprehensive indexing configuration"

# Source directories to index
sources:
  - "scripts/"
  - "src/"
  - "models/"
  - "data/"
  - "."

# File patterns to include
include:
  - "**/*.py"
  - "**/*.yaml" 
  - "**/*.yml"
  - "**/*.json"
  - "**/*.md"
  - "**/*.txt"
  - "**/*.pkl"
  - "**/*.pth"
  - "**/*.zip"
  - "**/*.db"
  - "**/*.sh"
  - "**/*.dockerfile"
  - "requirements.txt"
  - "setup.py"

# File patterns to exclude
exclude:
  - "__pycache__/"
  - "*.pyc"
  - ".git/"
  - "venv/"
  - "env/"
  - "logs/"
  - "*.log"
  - "*.log.*"
  - "node_modules/"
  - ".vscode/"
  - "*.tmp"
  - "mlruns/"
  - "*.npz"

# Programming languages in your project
languages:
  python:
    version: "3.8+"
    frameworks:
      - "asyncio"
      - "pandas"
      - "numpy" 
      - "ccxt"
      - "lightgbm"
      - "stable-baselines3"
      - "sklearn"
      - "tensorflow"
      - "torch"
      - "gymnasium"
      - "matplotlib"
      - "seaborn"

# Project structure understanding
components:
  data_pipeline:
    path: "src/data_pipeline/"
    description: "Data preprocessing and feature engineering"
    priority: "high"
  
  models:
    path: "src/models/"
    description: "ML model trainers (GRU, LightGBM, PPO)"
    priority: "high"
  
  trading_engine:
    path: "scripts/trader.py"
    description: "Main unified trading bot"
    priority: "critical"
  
  utilities:
    path: "src/utils/"
    description: "Logging and utility functions"
    priority: "medium"
  
  notifications:
    path: "src/notifier/"
    description: "Telegram notification system"
    priority: "medium"
  
  backtesting:
    path: "src/backtesting/"
    description: "Backtesting framework"
    priority: "medium"
  
  rl_environment:
    path: "src/rl_env/"
    description: "Reinforcement learning environment"
    priority: "high"

# Key features to highlight
features:
  - "Multi-symbol trading (BTC, ETH, SOL, ADA, XRP)"
  - "Per-symbol model loading and prediction"
  - "Feature alignment and NaN handling"
  - "Dynamic threshold calculation"  
  - "Portfolio management with risk controls"
  - "Paper trading simulation"
  - "Real-time market data integration"
  - "Telegram notifications"
  - "Comprehensive logging system"
  - "Model metadata management"
  - "Async trading loop"
  - "Risk-adjusted position sizing"

# Architecture patterns
patterns:
  - "Model factory pattern for per-symbol models"
  - "Feature engineering pipeline"
  - "Async market data fetching"
  - "Signal combination from multiple models"
  - "Risk management and position sizing"
  - "Observer pattern for notifications"
  - "Strategy pattern for different models"
  - "Repository pattern for data access"

# Dependencies and integrations  
integrations:
  - "Binance API via ccxt"
  - "Telegram Bot API"
  - "SQLite for data storage"
  - "YAML configuration management"
  - "MLflow for experiment tracking"
  - "Docker containerization"

# Indexing preferences
indexing:
  depth: "deep"
  include_comments: true
  include_docstrings: true
  cross_references: true
  semantic_understanding: true
  function_call_graph: true
  data_flow_analysis: true

# Enhanced indexing for your trading bot
advanced:
  # Focus areas for deeper analysis
  focus_areas:
    - "async def get_market_data"
    - "class UnifiedPaperTrader"  
    - "def generate_signals"
    - "def _combine_predictions"
    - "def _get_ppo_prediction"
    - "def _get_gru_prediction"
    - "def _get_lightgbm_prediction"
    - "class ModelMetadata"
    - "def load_all_models"
    - "def _generate_features_with_validation"
    - "async def execute_trades"
    - "def _calculate_position_size"
    - "async def run_trading_loop"
    
  # Code relationships to emphasize
  relationships:
    - "model loading -> prediction generation"
    - "feature engineering -> model input"
    - "signal generation -> trade execution"
    - "risk management -> position sizing"
    - "market data -> feature generation"
    - "predictions -> signal combination"
    - "portfolio state -> trading decisions"
    - "configuration -> trading parameters"
    
  # Key concepts in your codebase
  concepts:
    - "per-symbol model architecture"
    - "feature metadata alignment"
    - "dynamic threshold calculation"
    - "multi-model ensemble predictions"
    - "paper trading simulation"
    - "async data fetching with retries"
    - "NaN handling in features"
    - "portfolio balance management"
    - "transaction fee calculation"
    - "slippage modeling"
    - "telegram notification system"
    
  # Critical functions to prioritize
  critical_functions:
    - "UnifiedPaperTrader.__init__"
    - "generate_signals"
    - "_combine_predictions"
    - "execute_trades"
    - "_calculate_position_size"
    - "get_market_data"
    - "_generate_features_with_validation"
    - "run_trading_loop"
    
  # Data flow patterns
  data_flows:
    - "Market Data -> Features -> Predictions -> Signals -> Trades"
    - "Config -> Models -> Predictions -> Portfolio Updates"
    - "Database -> Features -> Model Input -> Trading Decisions"
    
  # Error handling patterns
  error_patterns:
    - "Market data fetching failures"
    - "Model prediction errors"
    - "Feature alignment mismatches"
    - "Network connectivity issues"
    - "Invalid trading signals"
    
  # Performance considerations
  performance_areas:
    - "Model loading optimization"
    - "Feature calculation efficiency"
    - "Memory usage in prediction loops"
    - "Async operation bottlenecks"
    - "Database query optimization"

# Symbol-specific configurations
trading_symbols:
  BTCEUR:
    threshold: 0.00008
    priority: "critical"
  ETHEUR:
    threshold: 0.00008
    priority: "high"
  SOLEUR:
    threshold: 0.00012
    priority: "medium"
  ADAEUR:
    threshold: 0.00012
    priority: "medium"
  XRPEUR:
    threshold: 0.00012
    priority: "medium"

# Model types and their characteristics
model_types:
  GRU:
    description: "Sequential neural network for time series"
    input_format: "windowed sequences"
    output: "price predictions"
  
  LightGBM:
    description: "Gradient boosting for feature-based prediction"
    input_format: "engineered features"
    output: "directional predictions"
  
  PPO:
    description: "Reinforcement learning for action selection"
    input_format: "state observations"
    output: "trading actions"

# Configuration management
config_structure:
  data:
    - "symbols list"
    - "timeframe settings"
    - "database connections"
  
  features:
    - "technical indicators"
    - "lookback windows"
    - "normalization settings"
  
  trading:
    - "balance management"
    - "risk parameters"
    - "position sizing"
  
  models:
    - "model paths"
    - "prediction thresholds"
    - "ensemble weights"
